#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('operadoresexpress:server');
const http = require('http');
const https = require('https');
const fs = require('fs');

const port = normalizePort(process.env.PORT || '2525');
app.set('port', port);
/*
let httpsOptions = {
  pfx: fs.readFileSync('./certificado/wildcard_2022.pfx'),
  passphrase: 'P4$$w0rd'
}
const secureServer = https.createServer(httpsOptions, app);
*/
const nonSecureServer = http.createServer(app);

nonSecureServer.listen(port, () => {
  console.log(`Server Ready on HTTP ${port}`);
});
nonSecureServer.on('error', onError);
nonSecureServer.on('listening', onListening);

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = nonSecureServer.address();
  const bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
